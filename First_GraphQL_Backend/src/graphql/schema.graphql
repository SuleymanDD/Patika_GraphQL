type Book {
    id: ID!
    title: String!
    author: Author
    author_id: String!
    score: Float
    isPublished: Boolean
}

input CreateBookInput{
    title: String!, author_id: ID!, score: Float!, isPublished: Boolean!
}
input UpdateBookInput{
    title: String, author_id: ID, score: Float, isPublished: Boolean
}

type Author {
    id: ID!
    name: String!
    surname: String
    age:Int
    books(filter: String): [Book!]
}

input CreateAuthorInput{
    name: String!, surname: String!, age: Int!
}
input UpdateAuthorInput{
    name: String, surname: String, age: Int
}

type DeleteAllOutput{
    count: Int
}

type Query {
    # Book
    books: [Book!]
    book(id: ID!): Book!

    # Author
    authors: [Author!]
    author(id: ID!): Author!
}

type Mutation {
    # Book
    createBook(data: CreateBookInput!): Book!
    updateBook(id: ID!, data: UpdateBookInput!): Book!
    deleteBook(id: ID!): Book!
    deleteAllBooks: DeleteAllOutput!

    # Author
    createAuthor(data: CreateAuthorInput!): Author!
    updateAuthor(id: ID!, data: UpdateAuthorInput!): Author!
    deleteAuthor(id: ID!): Author!
    deleteAllAuthors: DeleteAllOutput!
}

type Subscription{
    # Book
    bookCreated(author_id: ID!): Book!
    bookUpdated: Book!
    bookDeleted: Book!
    bookCount: Int!

    # Author
    authorCreated: Author!
    authorUpdated: Author!
    authorDeleted: Author!
}